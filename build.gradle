buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.2'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'
    }
}

apply plugin: 'fatjar'
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.mapzen'
version = '0.2-SNAPSHOT'

defaultTasks = ['clean', 'test', 'install']

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

repositories {
    maven { url 'http://repo.maven.apache.org/maven2' }
}

dependencies {
    compile 'com.squareup.okhttp:okhttp:1.5.2'
    compile 'org.json:json:20131018'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'com.google.guava:guava:16.0.1'
    testCompile 'junit:junit:4.10'
    testCompile 'org.apache.commons:commons-io:1.3.2'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.squareup.okhttp:mockwebserver:1.5.2'
}

def defaultEncoding = 'UTF-8'

compileJava {
    options.encoding = defaultEncoding
}

compileTestJava {
    options.encoding = defaultEncoding
}

javadoc {
    options.encoding = defaultEncoding
}

if (version.contains("SNAPSHOT")) {
  sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
  sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

if (project.hasProperty('singing.keyId')) {
  signing {
    sign configurations.archives
  }
} else {
  task signArchives {
    // Do nothing.
  }
}

if (!project.hasProperty('sontypeUsername')) {
  sonatypeUsername = ""
}

if (!project.hasProperty('sonatypePassword')) {
  sonatypePassword = ""
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: sonatypeRepositoryUrl) {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom.project {
        name 'On The Road'
        packaging 'jar'
        description 'Open Source Routing Machine wrapper and route location utilities'
        url 'http://github.com/mapzen/on-the-road'

        scm {
          url 'http://github.com/mapzen/on-the-road'
          connection 'scm:git:git://github.com/mapzen/on-the-road.git'
          developerConnection 'scm:git:ssh://git@github.com/mapzen/on-the-road.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'baldur'
            name 'Baldur Gudbjornsson'
            email 'baldur@mapzen.com'
          }

          developer {
            id 'ecgreb'
            name 'Chuck Greb'
            email 'chuck@mapzen.com'
          }
        }

        organization {
          name 'Mapzen'
          url 'http://mapzen.com'
        }
      }
    }
  }
}
